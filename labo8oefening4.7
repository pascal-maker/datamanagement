-- --------------------------------------------------
-- STEP 1: Create Database
-- --------------------------------------------------
CREATE DATABASE ConcertHall;
USE ConcertHall;

-- --------------------------------------------------
-- STEP 2: Customer table
-- --------------------------------------------------
CREATE TABLE Customer (
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(200) NOT NULL,
    Address VARCHAR(200),
    EmailAddress VARCHAR(200) UNIQUE,
    TelephoneNumber VARCHAR(20)
);

-- --------------------------------------------------
-- STEP 3: Newsletter table
-- --------------------------------------------------
CREATE TABLE Newsletter (
    NewsletterID INT AUTO_INCREMENT PRIMARY KEY,
    Title VARCHAR(200) NOT NULL,
    Description TEXT
);

-- Junction table: many-to-many between Customer & Newsletter
CREATE TABLE CustomerNewsletter (
    CustomerID INT NOT NULL,
    NewsletterID INT NOT NULL,
    PRIMARY KEY (CustomerID, NewsletterID), -- voorkomt dubbele inschrijvingen
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (NewsletterID) REFERENCES Newsletter(NewsletterID)
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- --------------------------------------------------
-- STEP 4: Event table (Concerts + Other Events)
-- --------------------------------------------------
CREATE TABLE Event (
    EventID INT AUTO_INCREMENT PRIMARY KEY,
    EventName VARCHAR(200) NOT NULL,
    EventDate DATE NOT NULL,
    EventTime TIME NOT NULL,
    Location VARCHAR(200),
    Price DECIMAL(10,2),
    EventType ENUM('Concert','Other') DEFAULT 'Concert'
);

-- --------------------------------------------------
-- STEP 5: Ticket table
-- --------------------------------------------------
CREATE TABLE Ticket (
    TicketID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT NOT NULL,
    EventID INT NOT NULL,
    Price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
        ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (EventID) REFERENCES Event(EventID)
        ON DELETE CASCADE ON UPDATE CASCADE
);
#ðŸ”‘ Uitleg

#CustomerNewsletter: composite PK voorkomt dubbele inschrijvingen (klant kan maar 1x dezelfde nieuwsbrief krijgen).

#Event: bevat zowel Concerten als Events â†’ onderscheid via EventType.

#Ticket: koppelt Customer en Event samen â†’ Ã©Ã©n klant kan meerdere tickets kopen voor hetzelfde event



